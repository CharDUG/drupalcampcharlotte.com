<?php
/**
 * @file
 * Code for the COD Session feature.
 */

include_once('cod_session.features.inc');

// Define variables values for scheduling content types.
define('COD_SCHEDULE_SINGLE', 'single');
define('COD_SCHEDULE_MULTIPLE', 'multiple');

/**
 * Implements hook_permission().
 */
function cod_session_permission() {
  $perms = array();
  /**
   * Define a custom set of permissions to control content type scheduling. This
   * gets around CCK Field Permissions because it disallows edit and view should
   * access check return false. Certain roles should be able to schedule certain
   * content types and so edit and view of room and time slot nodereference
   * fields should be allowed for authenticated users and these custom
   * permissions can disallow.
   */
  $types = cod_session_schedulable_types();
  if (!empty($types)) {
    foreach ($types as $type => $content_type) {
      $perms['schedule ' . $type] = array('title' => 'Schedule a ' . $content_type);
    }
  }
  return $perms;
}

/**
 * Helper function to determine content types with room and time slot fields.
 */
function cod_session_schedulable_types() {
  $schedulable_types = array();
  $types = node_type_get_types();
  foreach ($types as $type => $content_type) {
    $bundle = field_info_instances('node', $type);
    if (isset($bundle['field_session_room']) && isset($bundle['field_session_slot'])) {
      $schedulable_types[$type] = $content_type->name;
    }
  }
  return $schedulable_types;
}

/**
 * Implements hook_field_access().
 */
function cod_session_field_access($op, $field, $entity_type, $entity, $account) {
  // Only check access if working on an entity.
  if (isset($entity) && ($field['field_name'] == 'field_session_room' || $field['field_name'] == 'field_session_slot')) {
    switch ($op) {
      case 'edit':
        // Respect custom schedule permission.
        if (!user_access('schedule ' . $entity->type, $account)) {
          return FALSE;
        }
    }
    return TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cod_session_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node_type'])) {
    // Provide scheduling controls for this content type.
    $form['cod_session'] = array(
      '#type' => 'fieldset',
      '#title' => t('Scheduling settings'),
      '#description' => t('Scheduling is only available to content types that have room and time slot entityreference fields'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );
    $form['cod_session']['cod_unique'] = array(
      '#title' => t('Can content of this type share time slots with other scheduled content?'),
      '#type' => 'radios',
      '#options' => array(
        'single' => t('No, content of this type overrides room availability and occupies entire time slot'),
        'multiple' => t('Yes, content of this type can share a time slot if there is room availability'),
      ),
      '#default_value' => variable_get('cod_unique_' . $form['#node_type']->type, COD_SCHEDULE_SINGLE),
      '#description' => t('Scheduled items (such as sessions, schedule items and BoFs) can share a room and time slot with other scheduled items or be configured here to occupy the entire room for that time slot.'),
      // @todo, also make reference to room spanning?
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cod_session_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  $field_name = 'field_accepted';
  $field = $form['#field'];

  if ($field['field_name'] == $field_name) {
    $form_field = &$form['field'];
    $form_field['cod_declined_msg'] = array(
      '#type' => 'textarea',
      '#title' => t('Declined message'),
      '#description' => t('Display a message that a session was declined. Leave empty if you prefer to not display any notice. '),
      '#default_value' => variable_get('cod_declined_msg_' . $form['#instance']['bundle'], t('This session has been declined by the session moderation team.')),
    );

    $form['#submit'][] = 'cod_session_save_declined_message';
  }
}

/**
 * Function to save 'Declined message'.
 */
function cod_session_save_declined_message(&$form, &$form_state) {
  variable_set('cod_declined_msg_' . $form['#instance']['bundle'], $form_state['values']['field']['cod_declined_msg']);
}

/**
 * Implements hook_form_alter().
 */
function cod_session_form_alter(&$form, &$form_state, $form_id) {
  // Prepopulate the current user into the Speakers field
  // on new session creation.

  if ($form_id == 'session_node_form') {
    if (isset($form['field_speakers'])) {
      // Form tweaks for the Speakers field:
      $form['field_speakers'][LANGUAGE_NONE]['add_more']['#value'] = t('Add another speaker');
      // Prepopulate the current user into the Speakers field
      // on new session creation.
      if (empty($form['#node']->nid)) {
        global $user;
        $form['field_speakers'][LANGUAGE_NONE][0]['uid']['#default_value'] = $user->uid;
      }
    }
  }
  // @todo consider altering user_admin_perm form to disable editing
  // of edit slot and room permissions?
  if (strpos($form_id, '_node_form') !== FALSE) {
    $types = cod_session_schedulable_types();
    if (empty($types)) {
      return;
    }
    if (in_array($form['#node']->type, array_keys($types))) {
      // If this is content-type is not unique make the widget a select list.
      if (variable_get('cod_unique_' . $form['#node']->type, COD_SCHEDULE_SINGLE) == COD_SCHEDULE_MULTIPLE) {
        // Keep the widget from allowing multiple values.
        $form['field_session_room']['und']['#multiple'] = FALSE;
        $form['field_session_room']['und']['#type'] = 'select';
      }

      // Use $_GET for room and slot.
      if (isset($_GET['edit'])) {
        // @todo does this work if the widget wasn't altered above?
        $room_nid = $_GET['edit']['field_session_room']['target_id'];
        $slot_nid = $_GET['edit']['field_session_slot']['target_id'];
      }
      elseif (!empty($form['#node']->nid) && !empty($form['#node']->field_session_room) && !empty($form['#node']->field_session_slot)) {
        // Get room and slot from node during node edit.
        $room_nid = $form['#node']->field_session_room['und'][0]['target_id'];
        $slot_nid = $form['#node']->field_session_slot['und'][0]['target_id'];
      }
      else {
        return;
      }
      // Provide custom room & slot display.
      if (isset($room_nid) && isset($slot_nid)) {
        $room = node_load($room_nid);
        $slot = node_load($slot_nid);
      }
      // Sanity check that bad data (or none) didn't get through.
      if (!isset($slot) && !isset($room) && ($slot->type != 'time_slot' || $slot->status != 1 || $room->type != 'room' || $room->status != 1)) {
        return;
      }
      $form['cod_session'] = array(
        '#title' => t('Scheduling'),
        '#type' => 'fieldset',
        '#group' => FALSE,
        '#weight' => -1000,
      );
      $form['cod_session']['room_markup'] = array(
        '#markup' => '<div>' . t('<strong>Room</strong>: @room', array('@room' => $room->title)) . '</div>',
      );
      $time_range = cod_session_time_slot_format($slot);
      $form['cod_session']['slot_markup'] = array(
        '#markup' => '<div>' . t('<strong>Time</strong>: @day @start - @end', array('@day' => $time_range['day'], '@start' => $time_range['formatted_start'], '@end' => $time_range['formatted_end'])) . '</div>',
      );
      if (isset($form['#node']->nid)) {
        // Provide unschedule button on node edit.
        $form['cod_session']['cod_unschedule'] = array(
          '#type' => 'button',
          '#value' => t('Unschedule from this slot'),
          '#executes_submit_callback' => TRUE,
          '#submit' => array('_cod_session_unschedule', 'node_form_submit'),
        );
        $form['cod_session']['desc'] = array(
          '#type' => 'markup',
          '#value' => '<div>' . t("Need to change the room or time? Click 'Unschedule from this slot', then reshedule from the main schedule grid.") . '</div>',
        );
      }
      // Set Room and Time-slot fields. Prepopulate is not used to accomplish
      // this because as of 2.2 Prepopulate doesn't support hidden or access
      // FALSE fields.
      $form['field_session_room']['und']['#default_value'] = $room_nid;
      $form['field_session_slot']['und']['#default_value'] = $slot_nid;
      // Disable editing and hide the room and slot fields wuth after_build, FAPI!!!
      if (!user_access('edit any ' . $form['#node']->type . ' content')) {
        $form['field_session_room']['und']['#access'] = FALSE;
        $form['field_session_slot']['und']['#access'] = FALSE;
      }
      // Disable node preview because of Prepopulate bug http://drupal.org/node/661842
      unset($form['actions']['preview']);
    }
  }
}

/**
 * Form submit handler for bof node form.
 */
function _cod_session_unschedule(&$form, &$form_state) {
  if ($form_state['values']['op'] == $form_state['values']['cod_unschedule']) {
    // Unset scheduled room and time slot.
    $form_state['values']['field_session_room']['und'][0]['target_id'] = NULL;
    $form_state['values']['field_session_slot']['und'][0]['target_id'] = NULL;
    drupal_set_message(t('%name has been unscheduled. To reshedule, click "Schedule a session" on any available time slot.', array('%name' => $form_state['values']['title'])));
    // @todo set redirect?
  }
}

/**
 * Get schedulable content created by a user.
 *
 * @param object $account
 *  Account to retrieve content for.
 * @param string $type
 *  Content type to search for.
 * @param boolean $unscheduled
 *  Whether to return all BoFs or just those unscheduled.
 * @return array
 *  Array of BoF nodes or empty.
 */
function cod_session_users_content($account, $type, $unscheduled = FALSE) {
  $bofs = array();

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', $type)
  ->propertyCondition('status', 1)
  ->propertyCondition('uid', $account->uid);
  if ($unscheduled) {
    // @todo possible to use fieldCondition somehow?
    //$query->fieldCondition('field_session_room', 'nid', 'NULL', '!=')
      //->fieldCondition('field_session_slot', 'nid', 'NULL', '!=');
  }
  $result = $query->execute();
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $bofs = entity_load('node', $nids);
  }
  if ($unscheduled) {
    $hold = array();
    foreach ($bofs as $nid => $bof) {
      if (empty($bof->field_session_room) && empty($bof->field_session_slot)) {
        $hold[$nid] = $bof;
      }
    }
    $bofs = $hold;
  }

  return $bofs;
}

/**
 * Submit handler for scheduling form.
 */
function cod_session_schedule_form_submit($form, $form_state) {
  module_load_include('inc', 'node', 'node.pages');
  // @todo consider whether there should be a
  // cod_session_schedule_form_validate() with node_validate().
  $item = node_load($form_state['values']['session'], NULL, TRUE);
  $item->field_session_slot['und'][0]['target_id'] = $form_state['values']['schedule']['slot']->nid;
  $item->field_session_room['und'][0]['target_id'] = $form_state['values']['schedule']['room']->nid;
  $item = node_submit($item);
  node_save($item);
}

/**
 * Implements hook_node_view_alter().
 */
function cod_session_node_view_alter(&$build) {
  global $user;
  $account = $user;
  $node = $build['#node'];
  if ($node->type != 'session') {
    return;
  }
  // Display a message indicating when a session has been declined.
  if ($node->type == 'session' && $build['#view_mode'] == 'full'  && cod_session_is_declined($node)) {
    $msg = check_plain(variable_get('cod_declined_msg_' . $build['#bundle'], t('This session has been declined by the session moderation team.')));
    if ($output = theme('cod_session_declined_msg', array('msg' => $msg))) {
      if (isset($build['body'][0]['#markup'])) {
        $build['body'][0]['#markup'] = $output . $build['body'][0]['#markup'];
      }
      else {
        $build['body'][0]['#markup'] = $output;
      }
    }
  }

  // Display the presenter confirmation link when a session is
  // accepted and scheduled.
  if (!cod_session_is_scheduled($node) || !cod_session_is_accepted($node) || !cod_session_user_is_speaker($account->uid, $node)) {
    unset($build['links']['flag']['#links']['flag-session_confirm']);
  }

}

/**
* Helper function to determine if a session has been scheduled (assigned a
* room and time-slot combination)
*/

function cod_session_is_scheduled($node) {
  return !empty($node->field_session_room) && !empty($node->field_session_slot);
}

/**
* Helper function to determine whether a session is accepted.
*/
function cod_session_is_accepted($node) {
  return $node->field_accepted[LANGUAGE_NONE][0]['value'] == 1;
}

/**
* Helper function to determine whether a session is declined.
*/
function cod_session_is_declined($node) {
  return $node->field_accepted[LANGUAGE_NONE][0]['value'] == 2;
}
/**
 * Helper function to determien whether a given user is a speaker on a session.
 */

function cod_session_user_is_speaker($uid, $node) {
  if (empty($node->field_speakers)) {
    return FALSE;
  }
  foreach($node->field_speakers[LANGUAGE_NONE] as $speaker) {
    if ($speaker['target_id'] == $uid)  {
      return TRUE;
    }
  }
}
/**
 * Implements hook_node_presave().
 */
function cod_session_node_presave($node) {
  if (!empty($node->field_session_slot[LANGUAGE_NONE][0]['nid']) && !empty($node->field_session_room[LANGUAGE_NONE][0]['nid'])) {
    $room = node_load($node->field_session_room[LANGUAGE_NONE][0]['nid']);
    $slot = node_load($node->field_session_slot[LANGUAGE_NONE][0]['nid']);
    drupal_set_message(t('%name is scheduled for @slot in @room', array('%name' => $node->title, '@slot' => $slot->title, '@room' => $room->title)));
  }
}

/**
 * Implements hook_node_validate().
 */
function cod_session_node_validate($node, $form, &$form_state) {
  // If the node has a room and slot field, make sure there are no existing nodes that have the same room/slot combination.
  // Unless the node is not unique check room capacity.
  if (!empty($node->field_session_slot[LANGUAGE_NONE][0]['target_id']) && !empty($node->field_session_room[LANGUAGE_NONE][0]['target_id'])) {
    $slots = $rooms = array();
    foreach ($node->field_session_slot[LANGUAGE_NONE] as $slot) {
      if (!empty($slot['target_id'])) {
        $slots[] = $slot[0]['target_id'];
      }
    }

    // Get rooms.
    foreach ($node->field_session_room as $room) {
      if (!empty($room[0]['target_id'])) {
        $rooms[$room[0]['target_id']] = node_load($room[0]['target_id']);
      }
    }

    // Get room capacity if this node is scheduled in only one room.
    // If multiple rooms are selected it should mean this node is unique.
    $capacity = 0;
    if (count($rooms) == 1) {
      $room = current($rooms);
      $ent = entity_load('field_collection_item',array($room->field_room_slots_types_allowed[LANGUAGE_NONE][0]['value']));
      //is the session even allowed in this slot?
      if (isset($room->field_room_session_capacity[LANGUAGE_NONE][0]['value'])) {
        $capacity = $room->field_room_session_capacity[LANGUAGE_NONE][0]['value'];
      }
    }

    // Get all sessions that have the same room and time slot.
    if (!empty($slots) && !empty($rooms)) {
      $room_nids = array_keys($rooms);
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->propertyCondition('status', 1)
        ->fieldCondition('field_session_room', 'target_id', $room_nids, 'IN')
        ->fieldCondition('field_session_slot', 'target_id', $slots, 'IN');
      if (isset($node->nid)) {
        // Don't let this node block unscheduling.
        $query->propertyCondition('nid', $node->nid, '!=');
      }
      $result = $query->execute();
      if (isset($result['node'])) {
        $nids = array_keys($result['node']);
        $content = entity_load('node', $nids);
      }
      $errors = array();
      // Check to see if the room's time slot has exceeded its capacity.
      if (!empty($content)) {
        foreach ($content as $scheduled) {
          $capacity--;
          if ($capacity <= 0 || (variable_get('cod_unique_' . $scheduled->type, COD_SCHEDULE_SINGLE) == COD_SCHEDULE_SINGLE) || (variable_get('cod_unique_' . $node->type, COD_SCHEDULE_SINGLE) == COD_SCHEDULE_SINGLE)) {
            // @todo handle this scheduled item being in multiple rooms?
            $room = $rooms[$scheduled->field_session_room['und'][0]['target_id']];
            $errors[] = t('!session in !room', array('!session' => l($scheduled->title, 'node/' . $scheduled->nid), '!room' => l($room->title, 'node/' . $room->nid)));
          }
        }
      }

      if (!empty($errors)) {
        form_set_error('', format_plural(count($errors), 'The proposed time and room conflicts with the following item:', 'The proposed time and rooms conflict with the following items:') . theme('item_list', array('items' => $errors)) . format_plural(count($errors), 'Please select a different time slot and/or room.', 'Please select a different time slot and/or rooms.'));
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function cod_session_theme($existing, $type, $theme, $path) {
  return array(
    'cod_session_schedule' => array(
      'variables' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
      'template' => 'cod-session-schedule',
    ),
    'cod_session_declined_msg' => array(
      'render element' => 'msg',
    ),
    'cod_session_scheduler_form' => array(
  		'render element' => 'form'
  	),
  );
}

/**
 * Theme function to render the "Declined message".
 */
function theme_cod_session_declined_msg($variables) {
  $message = $variables['msg'];
  return '<div class="messages session-declined">' . $message . '</div>';
}

/**
 * Recursive ksort.
 */
function cod_session_ksort_recurse(&$array) {
  ksort($array);
  foreach (array_keys($array) as $key) {
    if (is_array($array[$key])) {
      cod_session_ksort_recurse($array[$key]);
      ksort($array[$key]);
    }
    else {
      return;
    }
  }
}

/**
 * @TODO: This function needs to be upgraded to D7.
 *
 * Create array of machine-readable keys.
 */
function _cod_session_machine_keys($prefix, $keys) {
  $machine_keys = array();
  foreach ($keys as $index => $key) {
    $machine_key_raw = trim(preg_replace('/_+/', '_', preg_replace('/[^a-z0-9]+/', '_', drupal_strtolower($key))), '_');
    if ($machine_key_raw == '') {
      $machine_key_raw = $index;
    }
    $machine_key = $prefix . '-' . $machine_key_raw;
    if (in_array($machine_key, $machine_keys)) {
      $machine_key .= '-' . $index;
    }
    $machine_keys[$index] = $machine_key;
  }
  return $machine_keys;
}

/**
 * Helper function computes time slot range.
 *
 * @param object Time slot node.
 * @return array Array of start and end times.
 */
function cod_session_time_slot_format($slot) {
  static $ranges = array();
  if (!isset($ranges[$slot->nid])) {
    $date_start = new DateObject($slot->field_slot_datetime[LANGUAGE_NONE][0]['value'], $slot->field_slot_datetime[LANGUAGE_NONE][0]['timezone_db']);
    $date_end = new DateObject($slot->field_slot_datetime[LANGUAGE_NONE][0]['value2'], $slot->field_slot_datetime[LANGUAGE_NONE][0]['timezone_db']);
    date_timezone_set($date_start, timezone_open($slot->field_slot_datetime[LANGUAGE_NONE][0]['timezone']));
    date_timezone_set($date_end, timezone_open($slot->field_slot_datetime[LANGUAGE_NONE][0]['timezone']));
    $day = date_format_date($date_start, 'custom', 'F j');
    $start = date_format_date($date_start, 'custom', 'g:iA');
    $end = date_format_date($date_end, 'custom', 'g:iA');
    $ranges[$slot->nid] = array(
      'day' => $day,
      'formatted_start' => $start,
      'formatted_end' => $end,
      'date_start' => $date_start,
      'date_end' => $date_end,
    );
  }
  return $ranges[$slot->nid];
}

/**
 * Title callback.
 */
function _cod_session_scheduler_title($type) {
  $type_info = node_type_get_type($type);
  return t('Schedule a @name', array('@name' => $type_info->name));
}

/**
 * Helper function to determine content types with single schedule types.
 */
function cod_session_single_schedulable_types() {
  $single_types = array();
  $types = node_type_get_types();
  foreach ($types as $type => $content_type) {
    $bundle = field_info_instances('node', $type);
    if (isset($bundle['field_session_room']) && isset($bundle['field_session_slot']) && variable_get('cod_unique_' . $type, COD_SCHEDULE_SINGLE) == COD_SCHEDULE_SINGLE) {
      $single_types[] = $type;
    }
  }

  return $single_types;
}
